//
//  LoginViewController.swift
//  accessibiliytraining_ios
//
//  Created by Lun Lam on 02/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
    func displaySetupView(viewModel: Login.SetupView.ViewModel)
    func displayLogin( viewModel: Login.Login.ViewModel )
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    let iconImageView = UIImageView()
    let userNameTitleLabel = UILabel()
    let userNameTextField = BorderTextField()
    let userNameErrorLabel = UILabel()
    let passwordTitleLabel = UILabel()
    let passwordTextField = BorderTextField()
    let loginButton = UIButton()
        
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupViews()
        
        interactor?.setupView(request: Login.SetupView.Request())
    }
    
    func setupViews()
    {
        view.backgroundColor = .white
        
        let contentView = UIStackView()
        contentView.axis = .vertical
        contentView.alignment = .center
        
        userNameErrorLabel.textColor = .red
        userNameErrorLabel.isHidden = true
        
        let iconBottomPaddingView = UIView()
        let usernameBottomPaddingView = UIView()
        let passwordBottomPaddingView = UIView()

        userNameTextField.delegate = self
        passwordTextField.delegate = self
        passwordTextField.isSecureTextEntry = true
        userNameTextField.textInsets = UIEdgeInsets(top: 0, left: 8, bottom: 0, right: 8)
        passwordTextField.textInsets = UIEdgeInsets(top: 0, left: 8, bottom: 0, right: 8)

        loginButton.backgroundColor = .gray
        loginButton.contentEdgeInsets = UIEdgeInsets(top: 8, left: 8, bottom: 8, right: 8)
        loginButton.addTarget(self, action: #selector(loginButtonDidPress), for: .touchUpInside)
        
        contentView.addArrangedSubview(iconImageView)
        contentView.addArrangedSubview(iconBottomPaddingView)
        contentView.addArrangedSubview(userNameTitleLabel)
        contentView.addArrangedSubview(userNameTextField)
        contentView.addArrangedSubview(userNameErrorLabel)
        contentView.addArrangedSubview(usernameBottomPaddingView)
        contentView.addArrangedSubview(passwordTitleLabel)
        contentView.addArrangedSubview(passwordTextField)
        contentView.addArrangedSubview(passwordBottomPaddingView)
        contentView.addArrangedSubview(loginButton)

        iconImageView.translatesAutoresizingMaskIntoConstraints = false
        iconImageView.addConstraints([
            NSLayoutConstraint(item: iconImageView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 100),
            NSLayoutConstraint(item: iconImageView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 100),
        ])
        
        iconBottomPaddingView.addConstraint(NSLayoutConstraint(item: iconBottomPaddingView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 50))
        
        usernameBottomPaddingView.addConstraint(NSLayoutConstraint(item: usernameBottomPaddingView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 10))
        
        passwordBottomPaddingView.addConstraint(NSLayoutConstraint(item: passwordBottomPaddingView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 20))
        
        userNameTextField.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:[view(200)]", options: [], metrics: nil, views: ["view": userNameTextField]))
        passwordTextField.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:[view(200)]", options: [], metrics: nil, views: ["view": passwordTextField]))

        contentView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(contentView)
        view.addConstraints([
            NSLayoutConstraint(item: contentView, attribute: .centerY, relatedBy: .equal, toItem: view, attribute: .centerY, multiplier: 1, constant: 0),
            NSLayoutConstraint(item: contentView, attribute: .centerX, relatedBy: .equal, toItem: view, attribute: .centerX, multiplier: 1, constant: 0),
            NSLayoutConstraint(item: contentView, attribute: .width, relatedBy: .lessThanOrEqual, toItem: view, attribute: .width, multiplier: 1, constant: -16),
        ])
    }
    
    @objc func loginButtonDidPress( sender: UIButton ){
        interactor?.login(request: Login.Login.Request(
            username: userNameTextField.text,
            password: passwordTextField.text
        ))
    }
        
    func displaySetupView(viewModel: Login.SetupView.ViewModel) {
        navigationItem.title = viewModel.title

        loginButton.setTitle(viewModel.loginButtonTitle, for: .normal)
        iconImageView.image = viewModel.iconImage
        userNameTitleLabel.text = viewModel.usernameTitle
        passwordTitleLabel.text = viewModel.passwordTitle

    }
    
    func displayLogin(viewModel: Login.Login.ViewModel) {                
        if let error = viewModel.error {
            userNameErrorLabel.text = error
            userNameErrorLabel.isHidden = false
        } else{
            userNameErrorLabel.isHidden = true
            router?.routeToList()
        }
    }
}

extension LoginViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        view.endEditing(true)
        return true
    }
}
