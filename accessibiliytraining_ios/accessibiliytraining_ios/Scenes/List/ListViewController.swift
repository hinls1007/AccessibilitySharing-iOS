//
//  ListViewController.swift
//  accessibiliytraining_ios
//
//  Created by Lun Lam on 02/06/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListDisplayLogic: class
{
    func displaySetUpViews(viewModel: List.SetupViews.ViewModel)
    func displayLoadData( viewModel: List.LoadData.ViewModel )
    func displaySelectRow( viewModel: List.SelectRow.ViewModel )
}

class ListViewController: BaseViewController, ListDisplayLogic
{
    var interactor: ListBusinessLogic?
    var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?
    
    // MARK: Object lifecycle
    
    var tableview = UITableView(frame: .zero, style: .grouped)
    let loadingView = LoadingView()
    
    var sections: [List.Section] = []
        
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupViews()
        
        interactor?.setupViews(request: List.SetupViews.Request())
    }
    
    func setupViews(){
        
        setupBackButton()
        
        tableview.dataSource = self
        tableview.delegate = self
        tableview.estimatedSectionHeaderHeight = UITableView.automaticDimension
        tableview.sectionHeaderHeight = UITableView.automaticDimension
        tableview.estimatedRowHeight = UITableView.automaticDimension
        tableview.rowHeight = UITableView.automaticDimension
        tableview.estimatedSectionFooterHeight = .leastNonzeroMagnitude
        tableview.sectionFooterHeight = .leastNonzeroMagnitude
        tableview.register(SectionHeaderView.self, forHeaderFooterViewReuseIdentifier: SectionHeaderView.description())
        tableview.register(ListSectionOneTableViewCell.self, forCellReuseIdentifier: ListSectionOneTableViewCell.description())
        tableview.register(ListCustomViewCell.self, forCellReuseIdentifier: ListCustomViewCell.description())
        
        view.addSubview(tableview)
        
        tableview.translatesAutoresizingMaskIntoConstraints = false
        
        view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:|[view]|", options: [], metrics: nil, views: ["view":tableview]))
        view.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:|[view]|", options: [], metrics: nil, views: ["view":tableview]))

    }
    
    
    func displaySetUpViews(viewModel: List.SetupViews.ViewModel) {
        navigationItem.title = viewModel.title
        
        backButton.accessibilityLabel = viewModel.backButtonAccessibilityLabel
        
        loadingView.config(with: LoadingViewConfig(title: viewModel.loadingViewTitle))

        loadingView.show(in: view)

        // if not delay the loading voice over will be cancel
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            UIAccessibility.post(notification: .layoutChanged, argument: self.loadingView)
        }

        interactor?.loadData(request: List.LoadData.Request())
    }
    
    func displayLoadData(viewModel: List.LoadData.ViewModel) {
        loadingView.removeFromSuperview()
        
        sections = viewModel.sections
        tableview.reloadData()
    }
    
    func displaySelectRow(viewModel: List.SelectRow.ViewModel) {
        router?.routeToDetail()
    }
}

extension ListViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return sections[section].rows.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.section == 0 {
            guard let cell = tableview.dequeueReusableCell(withIdentifier: ListSectionOneTableViewCell.description()) as? ListSectionOneTableViewCell else { return UITableViewCell()}
            
            let row = sections[indexPath.section].rows[indexPath.row]
            
            cell.config(with: ListSectionOneTableViewCellViewConfig(title: row.title, amount: row.amount, date: row.date, arrow: row.arrow))
            
            return cell
        } else {
            guard let cell = tableview.dequeueReusableCell(withIdentifier: ListCustomViewCell.description()) as? ListCustomViewCell else { return UITableViewCell()}
            
            let row = sections[indexPath.section].rows[indexPath.row]
            
            cell.listCustomView.config(with: ListCustomViewConfig(title: row.title, amount: row.amount, date: row.date, arrow: row.arrow))
            cell.accessibilityTraits = row.arrow != nil ? .button : .staticText

            return cell
        }
    }
}

extension ListViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        guard let view = tableview.dequeueReusableHeaderFooterView(withIdentifier: SectionHeaderView.description()) as? SectionHeaderView else { return nil }
        
        view.config(with: SectionHeaderViewConfig(title: sections[section].headerTitle))
        
        return view
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableview.deselectRow(at: indexPath, animated: false)
        
        interactor?.selectRow(request: List.SelectRow.Request(section: indexPath.section, row: indexPath.row))
    }
}
